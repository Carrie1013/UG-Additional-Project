from environment_terrain import TerrainMaze, Render, Action
from random_policy import RandomModel

import numpy as np
import logging

import matplotlib.pyplot as plt
import seaborn as sns
import pylab

logging.basicConfig(format="%(levelname)-8s: %(asctime)s: %(message)s",
                    datefmt="%Y-%m-%d %H:%M:%S",
                    level=logging.INFO)  # Only show messages *equal to or above* this level


def H(X):
    """
    H_ij = The average of X_i'j'
    For all positions (i', j') immediately neighboring (i, j)
    """
    maze = X.copy()
    conv = np.array([[0.125, 0.125, 0.125], # The convolution kernel for averaging
                     [0.125, 0, 0.125],
                     [0.125, 0.125, 0.125]])

    nrows, ncols = maze.shape
    for i in range(1, nrows - 1):
        for j in range(1, ncols - 1):
            maze[i, j] = np.sum(X[i-1:i+2, j-1:j+2] * conv)

    return maze


X = np.random.normal(0, np.sqrt(10), (10, 10))# X_ij ~ N(0, 10)
terrain_maze = H(X)

terrain_maze_4 = np.array([[2.4507556, -1.73924842, 2.05848922, 0.47666572],
                           [0.35204718, 0.63641132, 2.5164921, -1.56600428],
                           [1.7483633, 1.11014383, 0.23967998, -1.2505291],
                           [-4.75779692, -3.48793116, -4.30823291, -1.9692131]
                           ])

terrain_maze_8 = np.array([[0.08921166, -1.28075675, -1.21362696, 2.34358951, 2.79942489, 0.79946274, -3.01663096, -0.25523199],
                           [4.10941084, 0.37378632, 1.52598351, -5.23572522, 4.56465646, -1.8375519, 4.86421049, 6.06298285],
                           [1.4872403, -1.45263738, -6.05457432, 1.08255195, 7.18419934, 2.00951882, 4.3865862, -3.62686562],
                           [-4.24911536, -1.18185063, 3.88194727, 0.24916794, -3.56886474, -4.88068087, -8.41123343, 5.92324024],
                           [2.63329732, -5.32452208, -1.75570443, 2.38445884, 2.15651968, 0.89663674, 4.12687978, -3.11121865],
                           [-0.96212943, -3.59134294, -1.33051353, 3.35279896, 1.61337239, 1.88217632, -0.7469166, -5.44501436],
                           [1.90947889, -4.90790206, -0.76005423, -3.59193687, 0.80608384, 4.68247063, -1.0924456, 0.25557989],
                           [1.0188069, -0.41887896, 1.54056762, 4.38380581, 7.07381557, 0.99848012, 5.07819199, -0.39866283]])

terrain_maze_10 = np.array([[0.38796747, 1.49485972, -4.03226363, -3.87230813, 3.80372545, -2.44984836, 0.4412881, -0.53524813, -0.47802299, 1.99604812],
                            [2.55631676, 3.98947951, -2.09865007, -0.13740773, 1.57733991, -8.35580356, -2.72811346, -1.79872703, 0.67491216, 2.44858839],
                            [3.30710367, -10.70946943, -2.21815361, -3.87127803, 2.66695672, 0.07803577, -0.13987542, 0.8366972, -2.86186471, -3.39873459],
                            [-2.14886832, 2.68320658, 0.70545802, 0.78623031, -3.52167819, -1.20506761, -1.21439124, 3.47282978, -1.49965664, -1.35086962],
                            [0.93441455, 4.424971, -1.57580945, 1.30500715, 5.34893946, 0.83051557, -2.17573671, -5.2056338, -0.91067441, -2.19234362],
                            [-3.88392638, -3.10730658, 6.28753513, 3.25168587, -4.04906862, -7.58909699, 2.43050345, -0.04125657, -3.68523214, 2.51796961],
                            [-1.0252852, 1.13606122, -5.91239924, 7.5450803, 1.80678484, -1.16764744, 3.34309781, -1.07779164, 2.1032896, -3.3719343],
                            [-4.75967036, 1.53544703, -8.21415475, 0.20792873, 2.07522799, -4.61229012, -1.23528617, 3.48741114, -0.32580081, -4.18023602],
                            [-6.6808535, 4.32901977, 2.88643611, 1.75225829, 1.51979122, -4.78542215, 1.16545961, 3.27249983, 2.62231721, -0.38454834],
                            [-6.24177298, -2.0860649, -3.19661072, -0.10507936, 0.16472559, -0.65416411, -5.28744988, 0.23840876, 1.81741786, -0.22119133]
                            ])

terrain_maze_20 = np.array([[-5.06124897, -3.82536955, 0.82155859, -6.13466624, 2.53027249, -1.81309064, -2.42793463, 3.61536907, -1.72609139, -4.97571621, 2.56558645, 2.61286535, 5.26067678, -0.30377195, 3.19570176, 2.55991335, -3.87664561, 1.74594747, 0.89440428, -3.48331338],
                            [-2.04378846, -0.82490232, 0.93813152, -4.5099723, -6.6201466, -1.71216903, -3.0611904, 3.87672865, 2.60134572, 3.49880504, 0.39299465, -3.82665199, -5.98917506, 2.02358468, 5.0589715, 4.77826425, 2.8907651, 0.14033463, -0.02428864, -2.73011848],
                            [2.07148055, -3.50697007, 2.84660715, -0.68698607, 6.84999858, 4.13916111, -0.6095484, -3.35069206, -3.07008122, 1.55114996, -3.56494361, -2.26362425, 2.38517158, -5.16145011, -2.7331708, -0.51034842, 0.66662918, 1.15342955, 1.73186128, -0.39737247],
                            [1.34256371, 2.33821599, -1.52680724, -3.87831292, -0.39011112, 3.26768774, 0.0708363, -1.00713559, 3.80152182, -1.66548274, 1.01461379, 5.52773398, -3.81577154, 6.98916485, 2.14275187, -2.6942438, -2.48714921, -5.52614979, 4.52659923, -4.42098088],
                            [2.70478037, 1.22450368, -2.68104768, -1.24682651, -0.97119957, 4.12868582, 4.67568906, -0.33339664, -2.30416417, 3.22735036, 1.17355432, -0.72669345, -1.23819886, -5.00899162, 0.38824216, 5.97646587, 3.24950022, 4.10784433, -0.95795213, -0.86172531],
                            [0.1420062 , 2.40633317, 3.89858602, 0.50853451, -2.8275227 , -3.90418494, -0.38329107, 4.24681136, 1.3735881, -2.88617735, -1.11082413, -1.55670322, -0.17229819, 6.76589901, -2.8515678 , 2.94349914, 0.61842602, -2.23638479, 4.88517517, 0.59508566],
                            [-2.67970534, 3.00636644, -4.97988254, -4.49424958, 1.10374954, -0.12834041, 0.94755871, -1.88202312, 5.07633734, 4.14496135, 0.43797038, -0.90014831, -0.27352889, -9.81104765, -4.78929276, 3.90130384, -6.01213766, -3.06221551, -1.36920274, 4.26992701],
                            [-2.28550466, 0.38153982, -2.64903489, 3.55627993, 4.51479663, -0.63958783, 2.10218411, -3.32912092, -1.27824146, 6.82137287, -1.1228443, 0.25167936, -0.6362215, 8.50223433, 5.21281061, 1.65781363, -0.37658951, -0.18080298, 2.87344469, -1.23412257],
                            [3.59825054, -5.24565066, -0.25167753, 0.50282291, -2.75166714, -7.73689836, 2.1901094, 2.69810992, 4.18649954, 4.54631925, -0.68015756, -0.90296974, -3.44060428, -1.32222215, 3.15874895, 3.44876109, 3.02075966, -1.41088592, -4.46699464, -0.96866056],
                            [2.3133671, 2.45950023, -1.36243804, 2.73664407, -1.02876725, 1.84891337, -1.82558258, -3.95346522, 2.52114202, -5.26453402, 3.92506366, -2.49385661, -0.8628609, -8.62306356, 2.04977188, -2.05633233, -5.29025082, -1.5493686, 0.0608399, -2.79546277],
                            [-5.21104856, -4.1481348, -1.13929689, -1.36021829, -1.51669474, 3.12739601, 3.72421188, -6.5730975, -0.65490293, -3.74728737, 2.29391131, 5.28208222, 1.33973406, -2.89073966, -5.15271948, -4.11734744, -1.64453888, -5.65188072, 0.94022468, 0.02877874],
                            [-2.99931329, -0.87395484, -2.399674, -1.22331415, 5.68236308, 1.63807121, -3.57168288, -1.06555585, 3.84088156, -2.25286477, 1.52567634, 1.39333214, 3.41741672, 1.75613367, -3.59397386, -2.72619963, 3.75566175, 3.49804001, -4.50268701, -2.03379658],
                            [-3.59483922, 2.49730533, 2.79597873, 4.44654397, -3.32369049, -0.85183185, -0.32993568, 2.06763706, 5.08926867, 3.5896818, 4.20219886, -7.42921345, -4.33276851, -0.7886182, -0.69530049, -4.65306046, -5.91889514, 5.617179, -1.0300031, -1.32630575],
                            [1.4639989, -2.96416746, 0.47535707, -0.43897798, -0.15546142, -4.05649505, -2.4076865, 1.03526614, 3.67712655, 6.73172785, 3.35928982, -6.73115878, 3.07837828, -0.95245341, -0.77011542, 3.74590515, -2.59903298, 3.59538974, -1.84945679, 8.10733975],
                            [-2.60884244, -2.25199022, -1.00109771, 0.98296934, 0.9833852, -1.46820444, 2.61084037, -0.2422665, 0.77882349, -6.10352075, 0.2674863, -6.13124243, -0.07355349, 1.10118058, 3.41959162, -0.08628003, -2.78356126, -7.57161424, 2.98249642, 3.96827962],
                            [3.95385876, -0.80043535, 2.52956937, 3.54063153, -1.40879458, -2.32962075, 1.5306281, -1.59849265, -0.74454782, 2.35217394, -3.13074567, -0.30647623, 1.66691959, 2.76898392, 0.99752267, -2.68717024, -3.54957844, -4.53717583, -0.38358216, 0.94948011],
                            [0.91970195, -0.80658021, 0.85454031, 2.4102482, 1.28510717, 1.49748148, 4.36757461, 1.04446106, 3.63863074, -0.14964464, 0.2372668, -2.92299838, -3.1571751, -0.8558648, 4.69474366, -0.27122182, -5.83394609, 1.93739299, 1.4754538, 4.09106331],
                            [-2.02981827, 2.16854985, 3.28339339, -0.67417176, 5.60150444, -1.31495305, 0.19995065, 1.9428427, 4.50836934, 0.99696466, 1.08135088, -0.1138386, 0.74104314, 0.92746138, -3.84228464, 1.85964891, 3.17996154, 4.8980696, -3.8827592, 3.68297403],
                            [-0.12673013, 3.17634069, 0.8865849, 1.86411157, 1.50267838, -1.28023308, 5.43539559, 6.36053296, -2.89826499, 1.27693578, -0.63390321, 0.25323345, -1.03504494, -3.73203357, 5.76402326, -6.26776822, -0.18684099, 0.85234428, -2.53050935, 3.66046873],
                            [-2.39327174, 1.41325623, -1.76629311, 6.06319017, -3.18500091, -2.32009297, -8.73094219, -2.01874869, 4.62521833, 2.73651292, 0.49121587, -5.67861844, -1.03896235, -2.50378258, -0.30491089, -3.29470654, -0.70101555, -0.70744159, -4.23010341, -6.35713548]
                            ])

terrain_maze_100 = H(np.random.normal(0, np.sqrt(10), (100, 100)))

def compute_transition_function(maze):
    num_state = maze.size
    num_action = 4
    P = np.zeros([num_state, num_action, num_state], dtype=np.float32)
    for i in range(num_state):
        for j in range(num_action):
            row, col = np.unravel_index(i, maze.shape)
            if j == 0:  # "left"
                next_row = row
                if col == 0:
                    next_col = 0
                else:
                    next_col = col - 1
            elif j == 1:  # "right"
                next_row = row
                if col == maze.shape[1] - 1:
                    next_col = col
                else:
                    next_col = col + 1
            elif j == 2:  # "up"
                next_col = col
                if row == 0:
                    next_row = row
                else:
                    next_row = row - 1
            elif j == 3:  # down
                next_col = col
                if row == maze.shape[0] - 1:
                    next_row = row
                else:
                    next_row = row + 1
            else:
                raise ValueError(j)

            if row == maze.shape[0] - 1 and col == maze.shape[1] - 1:    # terminal state
                next_row, next_col = row, col
            k = np.ravel_multi_index((next_row, next_col), maze.shape)
            P[i, j, k] = 1.

            # action_meaning = {
            #     0: "left",
            #     1: "right",
            #     2: "up",
            #     3: "down"
            # }
            # print(f"({row, col} by {action_meaning[j]} to {next_row, next_col})")
    np.testing.assert_allclose(np.sum(P, axis=-1), 1.)
    return P


def compute_cost_function(maze):
    num_state = maze.size
    num_action = 4
    C = np.zeros([num_state, num_action], dtype=np.float32)
    for i in range(num_state):
        for j in range(num_action):
            row, col = np.unravel_index(i, maze.shape)
            if j == 0:  # "left"
                next_row = row
                if col == 0:
                    next_col = 0
                else:
                    next_col = col - 1
            elif j == 1:  # "right"
                next_row = row
                if col == maze.shape[1] - 1:
                    next_col = col
                else:
                    next_col = col + 1
            elif j == 2:  # "up"
                next_col = col
                if row == 0:
                    next_row = row
                else:
                    next_row = row - 1
            elif j == 3:  # down
                next_col = col
                if row == maze.shape[0] - 1:
                    next_row = row
                else:
                    next_row = row + 1
            else:
                raise ValueError(j)
            if row == maze.shape[0] - 1 and col == maze.shape[1] - 1:    # terminal state
                next_row, next_col = row, col

            if next_row == maze.shape[0] - 1 and next_col == maze.shape[1] - 1:
                cost = -1
            else:
                cost = np.maximum(0, maze[next_row, next_col] - maze[row, col])
            C[i, j] = cost

            # action_meaning = {
            #     0: "left",
            #     1: "right",
            #     2: "up",
            #     3: "down"
            # }
            # print(f"({row, col} by {action_meaning[j]} cost: {cost}")
    return C


if __name__ == "__main__":
    # # pylab config
    # pylab.rcParams['figure.figsize'] = (8, 6)
    # plt.rcParams['axes.unicode_minus'] = False
    # sns.set(color_codes=True, style='darkgrid', font='Arial', font_scale=1)

    from solver_AggVI import AggVISolver
    import time

    terrain_maze = H(np.random.normal(0, np.sqrt(10), (300, 300)))
    game = TerrainMaze(terrain_maze)
    cost_matrix = compute_cost_function(terrain_maze)
    transition_matrix = compute_transition_function(terrain_maze)

    vi = AggVISolver(cost_matrix, transition_matrix, 0.99)
    start_time = time.time()
    results, record = vi.run(False, 4000)
    print(f"Computation time: {time.time() - start_time}")
    policy = results["policy"]    # the last policy iterate
    value = results["utility"]    # the last value iterate
    # print(value)
    print(policy)
    # assert 0

    np.savetxt("value_terrain_SA.txt", value)

    # class VIModel:
    #     def predict(self, state):
    #         # We take the row first, while the game is column first
    #         col, row = state[0]
    #         index = np.ravel_multi_index((row, col), terrain_maze.shape)
    #         action = policy[index]
    #         return action
    #
    # model = VIModel()
    # game.render(Render.MOVES)
    # game.play(model)
    # plt.show()
